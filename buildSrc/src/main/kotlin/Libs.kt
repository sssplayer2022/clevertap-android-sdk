/**
 * Generated by
 *    $ ./gradlew buildSrcLibs
 * Re-run when you add a new dependency to the build
 *
 * Find which updates are available by running
 *     $ ./gradlew refreshVersions
 * And edit the file `versions.properties`
 *
 * See https://github.com/jmfayard/refreshVersions
 */
object Libs {

    const val androidx_annotation: String = "androidx.annotation:annotation:_"

    const val appcompat: String = "androidx.appcompat:appcompat:_"

    const val concurrent_futures: String = "androidx.concurrent:concurrent-futures:_"

    const val constraintlayout: String = "androidx.constraintlayout:constraintlayout:_"

    const val coordinatorlayout: String = "androidx.coordinatorlayout:coordinatorlayout:_"

    const val androidx_core_core: String = "androidx.core:core:_"

    const val core_ktx: String = "androidx.core:core-ktx:_"

    const val databinding_adapters: String = "androidx.databinding:databinding-adapters:_"

    const val databinding_common: String = "androidx.databinding:databinding-common:_"

    const val databinding_compiler: String = "androidx.databinding:databinding-compiler:_"

    const val databinding_runtime: String = "androidx.databinding:databinding-runtime:_"

    const val fragment: String = "androidx.fragment:fragment:_"

    const val fragment_ktx: String = "androidx.fragment:fragment-ktx:_"

    const val lifecycle_livedata_ktx: String = "androidx.lifecycle:lifecycle-livedata-ktx:_"

    const val lifecycle_viewmodel_ktx: String = "androidx.lifecycle:lifecycle-viewmodel-ktx:_"

    const val multidex: String = "androidx.multidex:multidex:_"

    const val multidex_instrumentation: String = "androidx.multidex:multidex-instrumentation:_"

    const val recyclerview: String = "androidx.recyclerview:recyclerview:_"

    const val espresso_core: String = "androidx.test.espresso:espresso-core:_"

    const val androidx_test_ext_junit: String = "androidx.test.ext:junit:_"

    const val androidx_test_core: String = "androidx.test:core:_"

    const val androidx_test_rules: String = "androidx.test:rules:_"

    const val androidx_test_runner: String = "androidx.test:runner:_"

    const val viewpager: String = "androidx.viewpager:viewpager:_"

    const val work_runtime: String = "androidx.work:work-runtime:_"

    const val work_testing: String = "androidx.work:work-testing:_"

    const val installreferrer: String = "com.android.installreferrer:installreferrer:_"

    const val com_android_tools_build_gradle: String = "com.android.tools.build:gradle:_"

    const val lint_api: String = "com.android.tools.lint:lint-api:_"

    const val lint_checks: String = "com.android.tools.lint:lint-checks:_"

    const val lint_gradle: String = "com.android.tools.lint:lint-gradle:_"

    const val clevertap_android_sdk: String = "com.clevertap.android:clevertap-android-sdk:_"

    const val clevertap_rendermax_sdk: String = "com.clevertap.android:clevertap-rendermax-sdk:_"

    const val clevertap_geofence_sdk: String = "com.clevertap.android:clevertap-geofence-sdk:_"

    const val clevertap_hms_sdk: String = "com.clevertap.android:clevertap-hms-sdk:_"

    const val clevertap_xiaomi_sdk: String = "com.clevertap.android:clevertap-xiaomi-sdk:_"

    const val clevertap_push_templates_sdk: String = "com.clevertap.android:push-templates:_"

    const val glide: String = "com.github.bumptech.glide:glide:_"

    const val exoplayer: String = "com.google.android.exoplayer:exoplayer:_"

    const val exoplayer_hls: String = "com.google.android.exoplayer:exoplayer-hls:_"

    const val exoplayer_ui: String = "com.google.android.exoplayer:exoplayer-ui:_"

    const val play_services_ads: String = "com.google.android.gms:play-services-ads:_"

    const val play_services_location: String = "com.google.android.gms:play-services-location:_"

    const val material: String = "com.google.android.material:material:_"

    const val gson: String = "com.google.code.gson:gson:_"

    const val firebase_messaging: String = "com.google.firebase:firebase-messaging:_"

    const val google_services: String = "com.google.gms:google-services:_"

    const val truth: String = "com.google.truth:truth:_"

    const val agcp: String = "com.huawei.agconnect:agcp:_"

    const val push: String = "com.huawei.hms:push:_"

    const val de_fayard_buildsrclibs_gradle_plugin: String =
        "de.fayard.buildSrcLibs:de.fayard.buildSrcLibs.gradle.plugin:_"

    const val catch_exception: String = "eu.codearte.catch-exception:catch-exception:_"

    const val junit_junit: String = "junit:junit:_"

    const val awaitility: String = "org.awaitility:awaitility:_"

    const val org_jacoco_agent: String = "org.jacoco:org.jacoco.agent:_"

    const val org_jacoco_ant: String = "org.jacoco:org.jacoco.ant:_"

    const val org_jacoco_core: String = "org.jacoco:org.jacoco.core:_"

    const val kotlin_annotation_processing_gradle: String =
        "org.jetbrains.kotlin:kotlin-annotation-processing-gradle:_"

    const val kotlin_gradle_plugin: String = "org.jetbrains.kotlin:kotlin-gradle-plugin:_"

    const val kotlin_scripting_compiler_embeddable: String =
        "org.jetbrains.kotlin:kotlin-scripting-compiler-embeddable:_"

    const val kotlin_stdlib_jdk7: String = "org.jetbrains.kotlin:kotlin-stdlib-jdk7:_"

    const val kotlin_stdlib_jdk8: String = "org.jetbrains.kotlin:kotlin-stdlib-jdk8:_"

    const val kotlin_test: String = "org.jetbrains.kotlin:kotlin-test:_"

    const val junit_jupiter_api: String = "org.junit.jupiter:junit-jupiter-api:_"

    const val junit_jupiter_engine: String = "org.junit.jupiter:junit-jupiter-engine:_"

    const val junit_platform_runner: String = "org.junit.platform:junit-platform-runner:_"

    const val mockito_core: String = "org.mockito:mockito-core:_"

    const val mockito_inline: String = "org.mockito:mockito-inline:_"

    const val opentest4j: String = "org.opentest4j:opentest4j:_"

    const val powermock_api_mockito2: String = "org.powermock:powermock-api-mockito2:_"

    const val powermock_classloading_xstream: String =
        "org.powermock:powermock-classloading-xstream:_"

    const val powermock_core: String = "org.powermock:powermock-core:_"

    const val powermock_module_junit4: String = "org.powermock:powermock-module-junit4:_"

    const val powermock_module_junit4_rule: String = "org.powermock:powermock-module-junit4-rule:_"

    const val robolectric: String = "org.robolectric:robolectric:_"

    const val jsonassert: String = "org.skyscreamer:jsonassert:_"

    const val sonarqube_gradle_plugin: String =
        "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:_"

    const val xmlpull: String = "xmlpull:xmlpull:_"

    const val kotlin_stblib: String = "org.jetbrains.kotlin:kotlin-stdlib:_"

}

object Android {

    // Android SDK
    const val compileSdkVersionVal = 33
    const val targetSdkVersionVal = 33
    const val buildToolsVersionVal = "33.0.0"
    const val minSdkVersionVal = 19
}

object SDKTest {

    const val jacocoToolVersion = "0.8.4"
}
